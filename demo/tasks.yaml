# These are Camunda external tasks and correspond to blocks on the BPMN diagram.
# Here we say the default service to use for each task.
# This can be overriden at any level in the hierarchy. i.e. in the uk we could pick a different aml service.
# And in the uk for a carloan with a merchant we could pick a different aml service again.

# For each of these tasks at run time we need
#  - the topic name to send the request to
#  - the schema to use for the request (we record the name and the precise value using the id)
#  - the schema to use for the response (we record the name and the precise value using the id)
#  - the topic name to listen for the response on

# these details are filled in by the post processor so we don't have to do this manually


# Unlike kafka we have a chain of responsibility to find the 'right' task description. We start most specific. We use a different templating than the config story for task
# This is because in different countries/products we might choose to have a different service to implement the task.
where:
  tasks:
    - "task/<task>/<reqOrResp>/${geo}/${product}/${channel}"
    - "task/<task>/<reqOrResp>"
    - "task/<task>/<reqOrResp>/${geo}/${product}"
    - "task/<task>/<reqOrResp>/${product}"

tasks:
  aml:
    taskDescription: "AML check for customer"
    service: experian_aml
    variables: [ 'userdata' ]
  creditCheck:
    taskDescription: "Credit check for customer"
    service: experian_creditCheck
    variables: [ 'userdata' ]
  signatureVerification:
    taskDescription: "Signature verification for document signing"
    service: internal_signatureVerification
    variables: [ 'userdata' ]
  pricing:
    taskDescription: "Pricing service for product and service pricing adjustments"
    service: internal_pricingService
    variables: [ 'userdata' ]
#  limitManagement:
#    taskDescription: "Limit management service for transaction and account limits"
#    service: internal_limitManagement
#    variables: ['userdata']
